class Node{
        String name;
        int time;
        int amount;
        String city;
        int index;
        
        public Node(String name, int time, int amount, String city, int index) {
            this.name = name;
            this.time =time;
            this.amount = amount;
            this.city = city;
            this.index = index;
        }
}
class Solution {
    public List<String> invalidTransactions(String[] transactions) {
        HashMap<String, List<Node>> map = new HashMap<>();
        boolean[] invalid = new boolean[transactions.length];
        for (int i = 0; i < transactions.length; i++) {
            String[] tmp = transactions[i].split(",");
            List<Node> dic = map.get(tmp[0]);
            if (dic == null) {
                dic = new ArrayList<>();
            }
            dic.add(new Node(tmp[0], Integer.parseInt(tmp[1]), Integer.parseInt(tmp[2]), tmp[3], i));
            map.put(tmp[0], dic);
        }
        
        for (Map.Entry<String, List<Node>> entry : map.entrySet()) {
            List<Node> dic = entry.getValue();
            Collections.sort(dic, (a, b) -> (a.time - b.time));
            for (int i = 0; i < dic.size(); i++) {
                for(int j=i+1;j<dic.size()&&dic.get(j).time<=dic.get(i).time+60;j++) {
                    if(!dic.get(i).city.equals(dic.get(j).city)) {
                        invalid[dic.get(i).index]=true;
                        invalid[dic.get(j).index]=true;
                    } 
                }
                if(dic.get(i).amount>1000) invalid[dic.get(i).index]=true;
            }
        }
        List<String> res=new ArrayList<>();
        for(int i=0;i<invalid.length;i++) {
            if(invalid[i]) res.add(transactions[i]);
        }
        return res;
    }
}


 
