class Trie {
    class TrieNode{
        char val;
        boolean isword;
        TrieNode[] next=new TrieNode[26];
         TrieNode(){}
        TrieNode(char c){
            this.val=c;
        }
    }
  

    /** Initialize your data structure here. */
    private TrieNode node;
    public Trie() {
        node=new TrieNode();
        node.val=' ';
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode ws=node;
        for(int i=0;i<word.length();i++){
            char c=word.charAt(i);
            if(ws.next[c-'a']==null){
                ws.next[c-'a']=new TrieNode(c);
            }
            ws=ws.next[c-'a'];
        }
        ws.isword=true;
    }

    
    
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode ws=node;
        for(int i=0;i<word.length();i++){
            char c=word.charAt(i);
            if(ws.next[c-'a']==null)
                return false;
            else
                ws=ws.next[c-'a'];
        }
        return ws.isword;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode ws=node;
        for(int i=0;i<prefix.length();i++){
            char c=prefix.charAt(i);
            if(ws.next[c-'a']==null)
                return false;
            else
                ws=ws.next[c-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */




