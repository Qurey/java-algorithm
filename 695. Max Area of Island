class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        if(grid.length==0 || grid[0].length==0)
            return 0;
        int area = 0, max = 0;
        int[][] visited = new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1&&visited[i][j]!=1){
                    visited[i][j] = 1;
                    area = dfs(i,j,grid,visited);
                    max = (area>max)?area:max;
                }
            }
        }
        return max;
    }
    public int dfs(int i, int j, int[][] grid, int[][] visited){
        int area = 1;
        if(i-1>=0&&grid[i-1][j]==1&&visited[i-1][j]!=1){
            visited[i-1][j]=1;
            area += dfs(i-1,j,grid,visited);
        }
        if(i+1<grid.length&&grid[i+1][j]==1&&visited[i+1][j]!=1){
            visited[i+1][j]=1;
            area += dfs(i+1,j,grid,visited);
        }
        if(j+1<grid[0].length&&grid[i][j+1]==1&&visited[i][j+1]!=1){
            visited[i][j+1]=1;
            area += dfs(i,j+1,grid,visited);
        }
        if(j-1>=0&&grid[i][j-1]==1&&visited[i][j-1]!=1){
            visited[i][j-1]=1;
            area += dfs(i,j-1,grid,visited);
        }
        return area;
    }
}
