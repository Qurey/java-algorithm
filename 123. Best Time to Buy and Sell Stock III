class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        int[][] dp = new int[3][prices.length];
        int maxPro = 0;
        for (int i = 1; i <= 2; i++) {
            int tmpMax = dp[i - 1][0] - prices[0];
            for (int j = 1 ; j < prices.length; j++) {
                dp[i][j] = Math.max(dp[i][j-1], prices[j]+tmpMax);
                maxPro = Math.max(maxPro, dp[i][j]);
                tmpMax = Math.max(dp[i - 1][j] - prices[j], tmpMax);
            }
        }
        return maxPro;
    }
}

//dp[k, i]= max(dp[k,i-1], dp[k-1, jj] + prices[i] - prices[jj]) 0<=jj<=i-1
//                          price[i] + max (dp[k-1, jj]-price[jj])
