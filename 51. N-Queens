class Point {
    int x;
    int y;
    
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        List<Point> tmp = new ArrayList<Point>();
        backtracking(n, ans, new ArrayList<Point>(), 0, new boolean[n], new boolean[n], new boolean[2*n], new boolean[2*n]);
        return ans;
    }
    
    public void backtracking(int n, List<List<String>> ans, List<Point> tmp, int i, boolean[] rows, boolean[] cols, boolean[] d1, boolean[] d2) {
        if (tmp.size() == n) {
            List<String> map = new ArrayList<>();
            for (Point p : tmp) {
                char[] charSet = new char[n];
                Arrays.fill(charSet, '.');
                charSet[p.y] = 'Q';
                map.add(String.valueOf(charSet));
            }
            ans.add(map);
            return;
        }
            for (int j = 0;j < n;j++) {
                if (rows[i] || cols[j] || d1[i+j] || d2[i-j+n]) {
                    continue;
                }
                rows[i] = true;
                cols[j] = true;
                d1[i+j] = true;
                d2[i-j+n] = true;;
                tmp.add(new Point(i, j));
                backtracking(n, ans, tmp, i+1, rows, cols, d1, d2);
                tmp.remove(tmp.size()-1);
                rows[i] = false;
                cols[j] = false;
                d1[i+j] = false;
                d2[i-j+n] = false;
        }
    }
    
    
    
}
