class Solution {
    public String minWindow(String s, String t) {
        if(s.length()==0||t.length()==0)
            return "";
        HashMap<Character, Integer> winDict = new HashMap();
        for(int i=0;i<t.length();i++){
            int tmp = winDict.getOrDefault(t.charAt(i),0);
            winDict.put(t.charAt(i),tmp+1);
        }
        
        int required = winDict.size();
        int formed = 0,l=0,r=0;
        int[] ans = {-1, 0, 0}; //length, left, right
        HashMap<Character, Integer> winCt = new HashMap();
        
        while(r<s.length()){
            char c = s.charAt(r);
            int tmp = winCt.getOrDefault(c,0);
            winCt.put(c,tmp+1);
            
            if(winDict.containsKey(c)&&winCt.get(c).intValue()==winDict.get(c).intValue())
                formed++;
            
                while(l<=r&&(r-l+1)>=t.length()
                    &&formed==required){
                    if(ans[0]==-1||r-l+1<ans[0]){
                        ans[0]=r-l+1;
                        ans[1]=l;
                        ans[2]=r;
                    }
                    char c1 = s.charAt(l);
                    int tmp1 = winCt.get(c1);
                    winCt.put(c1,tmp1-1);
                    if(winDict.containsKey(c1)&&winCt.get(c1).intValue()<winDict.get(c1).intValue())
                        formed--;
                    l++;
                }
                r++;
            
        
        }
        
        return ans[0] == -1 ? "" : s.substring(ans[1],ans[2]+1);
        
    }
}

