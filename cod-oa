#include <iostream>
#include <stdio.h>
#include <cmath>
#include <vector>
#include <string>

using namespace std;

/*
________________________________________________________________________________

Treyarch Technical Take-home Test
________________________________________________________________________________


Please read all instructions before starting.

This exam consists of 3 questions.

Complete each of the functions below.
State the amount of time you took for each problem on the line marked "Time:"
Do not modify function declarations.
You are welcome to use any standard library.
You may use helper functions.
You can assume well-formed input.
If you have any concerns, use your best judgment and add a comment.
Place all your code in this file only.
Do all your own work.
Do not distribute this exam.
Have Fun!

________________________________________________________________________________

*/


// A struct for representing a 3D Vector with a constructor
struct Vector3
{
    float x;
    float y;
    float z;

    Vector3( float xIn, float yIn, float zIn )
    {
        x = xIn;
        y = yIn;
        z = zIn;
    }
};

// Function Declarations
void TreyArch( int Trey, int Arch, int n );
void PlayerInfo( int stats );
bool CanHearSniper( Vector3 listenerPosition, Vector3 sniperPosition, Vector3 sniperForward, float distance, float cone );




// Main
// Calls functions with sample inputs
// No need to modify this function
int main()
{
    TreyArch( 3, 5, 15 );
    PlayerInfo( 3411782069 );
    CanHearSniper( Vector3( 0.0f, 0.0f, 0.0f ), Vector3( 1000.0f, 0.0f, 0.0f ), Vector3( -1.0f, 0.0f, 0.0f ), 1100.7f, 10 );
    return 0;
}


/////////////////////////////////////
// PLACE ALL CODE BELOW THIS BLOCK //
/////////////////////////////////////


// Problem 1

// TreyArch
// For each number starting from 1 and going up to n, this function prints the following
// "Trey" - If the number is a multiple of Trey OR contains the digit Trey
// "Arch" - If the number is a multiple of Arch OR contains the digit Arch
// "TreyArch" - If the number falls into both categories above
// The number itself if none of the rules above hold for that number
// n - the number up to which this function prints
// Trey - first digit 3 - 9
// Arch - second digit 3 - 9

/*
Sample Input
-----------------------------------------------------------
3 5 15

Sample Output
-----------------------------------------------------------
1 2 Trey 4 Arch Trey 7 8 Trey Arch 11 Trey Trey 14 TreyArch
*/
int check(int trey,int n){
    if(n<trey)
        return 0;
    if(n%trey==0)
        return 1;
    while(n/10>0){
        if(n%10==trey)
            return 1;
        n=n/10;
    }
    if(n%10==trey)
        return 1;
    return 0;
}

void TreyArch( int Trey, int Arch, int n )
{
    int i=0;
    for(i=1;i<=n;i++){
        if(check(Trey,i)&&check(Arch,i))
            printf("TreyArch ");
        else if(check(Trey,i))
            printf("Trey ");
        else if(check(Arch,i))
            printf("Arch ");
        else
            printf("%d ",i);
    }
}

// Time: 5 min




// Problem 2

// PlayerInfo
// Prints the player info stored inside the stats passed in
// From least significant to most significant bits:
// Bits 0 - 7 contain the players kills															Print Number
// Bits 8 - 15 contain the players deaths														Print Number
// Bits 16 - 17 contain the players weapon class												Print "Assault" "SMG" "LMG" or "Sniper"
// Bit 18 is handedness: 1 for right, 0 for left												Print "Right Hand" or "Left Hand"
// Bits 19 - 22 contain the players setting for vertical look sensitivity						Print Number
// Bits 23 - 26 contain the players setting for horizontal look sensitivity						Print Number
// Bits 27 - 30 contain the players setting for auto-aim sensitivity							Print Number
// Bit 31 is if the player is getting an internship at Treyarch: 1 for yes, 0 for no			Print "Yes" or "No"
// stats - the stats blob passed in

/*
Sample Input
-----------------------------------------------------------
3411782069

Sample Output
-----------------------------------------------------------
Kills: 181
Deaths: 169
Class: Sniper
Hand: Left Hand
Vertical Look Sensitivity: 11
Horizontal Look Sensitivity: 6
Auto-Aim Sensitivity: 9
Internship: Yes
*/

enum PlayerWeaponClass
{
    PWD_ASSAULT,
    PWD_SMG,
    PWD_LMG,
    PWD_SNIPER,
    PWD_COUNT,
};

void PlayerInfo( int stats )
{
    string weaponClass[4] = {"Assault", "SMG", "LMG", "Sniper"};

    printf("\nKills: %d",stats&0x000000FF);	//kills
    printf("\nDeaths: %d",(stats&0x0000FF00)>>8);	//deaths
    printf("\nClass: %s",weaponClass[(stats&0x00030000)>>16].c_str());	//Class
    printf("\nHand: %s",((stats&0x00040000)>>18)?"Right Hand":"Left Hand");	//hand
    printf("\nVertical Look Sensitivity: %d",(stats&0x00780000)>>19);	//vertical
    printf("\nHorizontal Look Sensitivity: %d",(stats&0x07800000)>>23); //horizon
    printf("\nAuto-Aim Sensitivity: %d",(stats&0x78000000)>>27);	//auto
    printf("\nInternship: %s",((stats&0x80000000)>>31)?"Yes":"No"); //internship

}

// Time: 10 min




// Problem 3

// CanHearSniper
// Task - Complete the function to determine if a player can hear a sniper's gunfire
// Prints true or false for debug purposes

// listenerPosition - The 3d position of the player listening
// sniperPosition - The 3d world position of the sniper
// sniperForward - The normalized vector of the direction that the sniper is firing in
// distance - the max distance that the sniper can be heard from
// cone - the max angle in DEGREES that the sniper's gunfire can be heard in ( 0 - 360 )

/*
Sample Input
-----------------------------------------------------------
Vector3( 0.0f, 0.0f, 0.0f ), Vector3( 1000.0f, 0.0f, 0.0f ), Vector3( -1.0f, 0.0f, 0.0f ), 1100.7f, 10

Sample Output
-----------------------------------------------------------
true
*/

//bool CanHearSniper( Vector3 listenerPosition, Vector3 sniperPosition, Vector3 sniperForward, float distance, float cone )
//{
//    return false;
//}

float range(Vector3 a, Vector3 b) {
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)+(a.z-b.z)*(a.z-b.z));
}

float angle(Vector3 a, Vector3 b){
    if (sqrt(a.x*a.x+a.y*a.y+a.z*a.z)==0
    ||sqrt(b.x*b.x+b.y*b.y+b.z*b.z)==0){
        return 0;
    }
    return acos((a.x*b.x + a.y*b.y + a.z*b.z)
    /(sqrt(a.x*a.x+a.y*a.y+a.z*a.z)*sqrt(b.x*b.x+b.y*b.y+b.z*b.z)));
}

bool CanHearSniper(Vector3 listenerPosition, Vector3 sniperPosition, Vector3 sniperForward, float distance, float cone)
{
    bool hear = false;
    if (range(listenerPosition,sniperPosition)<=distance) {//range
        Vector3 sniperToListener(listenerPosition.x - sniperPosition.x,
                listenerPosition.y-sniperPosition.y,listenerPosition.z-sniperPosition.z);
        if (angle(sniperForward,sniperToListener)<= cone/2) {//angle
            hear = true;
        }
    }
    printf("\n%s",hear?"true":"false");

    return hear;
}

// Time:
