class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList();
        List<Integer> tmp = new ArrayList();
        helper(ans,tmp,target,candidates,0);
        return ans;
    }
    
    public void helper(List<List<Integer>> ans, List<Integer> tmp, int target, int[] candidates,int start){
        if(target==0){
            if(!ans.contains(tmp)){
                ans.add(new ArrayList(tmp));
            }
            return;
        }
        else if(target<candidates[0])
            return;
        int len=candidates.length;
        for(int i=start;i<len;i++){
            tmp.add(candidates[i]);
            helper(ans,tmp,target-candidates[i],candidates,i);
            // if(tmp.size())
            tmp.remove(tmp.size()-1);
        }
        return;
    }
}
