class UF{
    int N;
    int[] id;
    int[] sz;
    int seg;
    
    public UF(int n){
        N=n;
        id=new int[n];
        sz=new int[n];
        for(int i=0;i<n;i++){
            id[i]=i;
            sz[i]=1;
        }
        seg=n;
    }
    
    public int root(int i){
        while(i!=id[i]){
            id[i]=id[id[i]];
            i=id[i];
        }
        return i;
    }
    
    public boolean connected(int p,int q){
        return root(p)==root(q);
    }
    
    public void union(int p,int q){
        int i=root(p);
        int j=root(q);
        if(i==j)
            return;
        if(sz[i]<sz[j]){
            id[i]=j;
            sz[j]+=sz[i];
        }
        else{
            id[j]=id[i];
            sz[i]+=sz[j];
        }
        seg--;
    }
}
class Solution {
    public int countComponents(int n, int[][] edges) {
        UF uf=new UF(n);
        for(int i=0;i<edges.length;i++){
            uf.union(edges[i][0],edges[i][1]);
        }
        return uf.seg;
    }
}
