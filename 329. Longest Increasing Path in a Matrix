class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length==0||matrix[0].length==0)
            return 0;
        int[][] mem = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                int len = dfs(matrix,i,j,mem);
                max = Math.max(len,max);
            }
        }
        return max;
    }
    
    public int dfs(int[][] matrix, int i, int j,int[][] mem){
        if(mem[i][j]>0)
            return mem[i][j];
        int[] x = {0,0,1,-1};
        int[] y = {1,-1,0,0};
        for(int k=0;k<4;k++){
            if(i+x[k]>=0&&i+x[k]<matrix.length&&j+y[k]>=0&&j+y[k]<matrix[i].length&&matrix[i+x[k]][j+y[k]]>matrix[i][j]){
                mem[i][j] = Math.max(mem[i][j],dfs(matrix,i+x[k],j+y[k],mem));           
            }                      
        }
        mem[i][j] = mem[i][j]+1;
        return mem[i][j];
    }
}
