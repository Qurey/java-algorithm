class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> adject=new ArrayList(n);
        boolean[] visited=new boolean[n];
        for(int i=0;i<n;i++){
            adject.add(i,new ArrayList<Integer>());
        }
        
        for(int i=0;i<edges.length;i++){
            int m=edges[i][0];
            int n1=edges[i][1];
            adject.get(m).add(n1);
            adject.get(n1).add(m);
        }
        
        if (isCyclic(adject,visited,0,-1))
            return false;
        
        for (int i = 0; i < n; i++) {
            if (!visited[i]) 
                return false;
        }
        return true;
        
        
    }
    
    public boolean isCyclic(List<List<Integer>> adject,boolean[] visited,int start,int parent){
        visited[start]=true;
        
        for(int i=0;i<adject.get(start).size();i++){
            int v=adject.get(start).get(i);
            if ((visited[v] && parent != v) || (!visited[v] && isCyclic(adject,                  visited, v,start)))
                return true;
        }
        return false;
    }
    
}


class UF {
    private int N;
    private int[] id;
    private int[] sz;
    int seg;
	public UF(int n){
        N=n;
        id=new int[n];
        sz=new int[n];
        for(int i=0;i<n;i++){
            id[i]=i;
            sz[i]=1;
        }
        seg=n;
    }
    
    public int root(int i){
        while(id[i]!=i){
            id[i]=id[id[i]];
            i=id[i];
        }
        return i;
    }
    
    public boolean connected(int p,int q){
        return root(p)==root(q);
    }
    
    public void union(int p,int q){
        int i=root(p);
        int j=root(q);
        if(i==j)
            return;
        if(sz[i]<sz[j]){
            id[i]=j;
            sz[j]+=sz[i];
        }
        else{
            id[j]=i;
            sz[i]+=sz[j];
        }
        seg--;
    }
}

class Solution {
    public boolean validTree(int n, int[][] edges) {
        UF uf=new UF(n);
        for(int i=0;i<edges.length;i++){
            if(uf.root(edges[i][0])==uf.root(edges[i][1])){
                return false;
            }
            uf.union(edges[i][0],edges[i][1]);
        }
        if(uf.seg!=1)
            return false;
        return true;
        
        
    }
    
    
}





