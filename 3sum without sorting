class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        HashMap<Integer,Integer> num = new HashMap(); //record number
        HashMap<Integer,Integer> sum = new HashMap(); // record index
        List<Integer> arr = new ArrayList();
        List<List<Integer>> ans = new ArrayList();
        if(nums.length<3)
            return ans;
        int tmp=0;
        for(int i=0;i<nums.length;i++){
            if(num.containsKey(nums[i])){
                num.replace(nums[i],num.get(nums[i]),num.get(nums[i])+1);
            }
            else{
                sum.put(nums[i],tmp++);
                num.put(nums[i],1);
                arr.add(nums[i]);
            }   
        }
        // a,b,c
        for(int i=0;i<arr.size()-1;i++){
            for(int j=i+1;j<arr.size();j++){
                if(sum.containsKey(-arr.get(i)-arr.get(j))
                   &&sum.get(-arr.get(i)-arr.get(j))>j){
                    ans.add(Arrays.asList(arr.get(i),arr.get(j),-arr.get(i)-arr.get(j)));
                }
            }
        }
        //a,a,b
        for(int i=0;i<arr.size();i++){
            if(num.get(arr.get(i))>1){
                if(arr.get(i)==0&&num.get(0)>=3)
                    ans.add(Arrays.asList(0,0,0));
                if(arr.get(i)!=0&&sum.containsKey(-arr.get(i)-arr.get(i))){
                    ans.add(Arrays.asList(arr.get(i),arr.get(i),-arr.get(i)-arr.get(i)));
                }
            }
        }
        
        
        return ans;
       
    }
            
    
    
}
