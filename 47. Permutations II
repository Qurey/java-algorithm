class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        List<Integer> tmp = new ArrayList();
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        backtracking(ans,tmp,nums,used);
        return ans;
    }
    
    public void backtracking(List<List<Integer>> ans, List<Integer> tmp, int[] nums,boolean[] used){
        if(tmp.size()==nums.length){
            ans.add(new ArrayList<>(tmp));
            return;
        }
        else{
            for(int i=0;i<nums.length;i++){
                if(used[i] == true) continue;
                if(i>0 && nums[i-1] == nums[i] && !used[i-1]) continue;
                tmp.add(nums[i]);
                used[i] = true;
                backtracking(ans,tmp,nums,used);
                used[i] = false;
                tmp.remove(tmp.size()-1);
            }
        }
    }
}


